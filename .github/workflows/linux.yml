name: linux

# Only build PRs, the main branch, and releases.
on:
  pull_request:
  push:
    branches:
      - main
  release:
    types:
      - published
  schedule:
    - cron: "14 14 20 * *"

# Use bash by default in all jobs
defaults:
  run:
    # Using "-l {0}" is necessary for conda environments to be activated
    # But this breaks on MacOS if using actions/setup-python:
    # https://github.com/actions/setup-python/issues/132
    shell: bash

jobs:
  test:

    name: ${{ matrix.case.os }} py${{ matrix.case.python-version }} ${{ matrix.case.name }}
    runs-on: ${{ matrix.case.os }}-latest

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu, ]  # macos, windows]  # Only Linux currently.
        case:
          - python-version: "3.7"
            name: minimal
            os: ubuntu
            conda: "'numpy=1.17' 'scipy=1.4' 'numba=0.47'"
            pip: ""
            test: ""
          - python-version: "3.8"
            name: plain
            os: ubuntu
            conda: "numba scipy"
            pip: ""
            test: ""
          - python-version: "3.8"
            name: full
            os: ubuntu
            conda: "numba 'matplotlib>=3.3' scipy"
            pip: pytest-mpl scooby
            test: "--mpl"
          - python-version: "3.9"
            name: plain
            os: ubuntu
            conda: "numba scipy"
            pip: ""
            test: ""
          - python-version: "3.9"
            name: full
            os: ubuntu
            conda: "numba 'matplotlib>=3.3' scipy"
            pip: pytest-mpl scooby
            test: "--mpl"
          - python-version: "3.10"
            name: plain
            os: ubuntu
            conda: "numba scipy"
            pip: ""
            test: ""
          - python-version: "3.10"
            name: full
            os: ubuntu
            conda: "numba 'matplotlib>=3.3' scipy"
            pip: pytest-mpl scooby
            test: "--mpl"

    env:
      # Used to for coveralls flag
      OS: ${{ matrix.case.os }}
      PYTHON: ${{ matrix.case.python-version }}

    steps:

      # Cancel any previous run of the test job; [pin v0.8.0 (2021-02-13)]
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@3d86a7cc43670094ac248017207be0295edbc31d
        with:
          access_token: ${{ github.token }}

      # Checks-out your repository under $GITHUB_WORKSPACE
      - name: Checkout
        uses: actions/checkout@v2
        with:
          # Need to fetch more than the last commit so that setuptools_scm can
          # create the correct version string. If the number of commits since
          # the last release is greater than this, the version still be wrong.
          # Increase if necessary.
          fetch-depth: 100
          # The GitHub token is preserved by default but this job doesn't need
          # to be able to push to GitHub.
          persist-credentials: false

      # Need the tags so that setuptools_scm can form a valid version number
      - name: Fetch git tags
        run: git fetch origin 'refs/tags/*:refs/tags/*'

      - name: Setup miniconda
        # [pin v2.1.1 (2021-04-01)]
        uses: conda-incubator/setup-miniconda@35d1405e78aa3f784fe3ce9a2eb378d5eeb62169
        with:
          auto-update-conda: true
          miniconda-version: "latest"
          python-version: ${{ matrix.case.python-version }}
          miniforge-variant: Mambaforge
          use-mamba: true
          # The following should not be necessary with Mambaforg(?).
          channels: conda-forge,defaults
          channel-priority: strict

      - name: Install dependencies
        shell: bash -l {0}
        run: |
          conda config --set always_yes yes --set changeps1 no
          conda config --show-sources
          conda config --show
          conda install ${{ matrix.case.conda }} pytest pytest-cov pip
          pip install setuptools_scm coveralls pytest-flake8 ${{ matrix.case.pip }}
          conda info -a
          conda list

      - name: Test with pytest
        shell: bash -l {0}
        run: |
          python setup.py install
          python -c 'import empymod; print(empymod.Report())'
          cp ./tests/matplotlibrc ./.
          pytest --cov=empymod --flake8 ${{ matrix.case.test }}

      - name: Coveralls
        # [pin v20201129]
        uses: AndreMiras/coveralls-python-action@f5fd5c309b39d01599fb92c72d4f7409ea78aec9
        with:
          parallel: true
          flag-name: ${{ matrix.case.python-version }} ${{ matrix.case.name }} (${{ matrix.case.os }})


  coveralls_finish:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - name: Coveralls Finished
      # [pin v20201129]
      uses: AndreMiras/coveralls-python-action@f5fd5c309b39d01599fb92c72d4f7409ea78aec9
      with:
        parallel-finished: true

  deploy:
    needs: test
    name: Deploy to PyPI
    runs-on: ubuntu-latest
    # Only from the origin repository, not forks; only main and tags.
    if: github.repository_owner == 'emsig' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/'))

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE
      - name: Checkout
        uses: actions/checkout@v2
        with:
          # Need to fetch more than the last commit so that setuptools_scm can
          # create the correct version string. If the number of commits since
          # the last release is greater than this, the version will still be
          # wrong. Increase if necessary.
          fetch-depth: 100
          # The GitHub token is preserved by default but this job doesn't need
          # to be able to push to GitHub.
          persist-credentials: false

      # Need the tags so that setuptools_scm can form a valid version number
      - name: Fetch git tags
        run: git fetch origin 'refs/tags/*:refs/tags/*'

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.9"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install wheel
          pip install -r requirements-dev.txt

      - name: Build source and wheel distributions
        if: github.ref == 'refs/heads/main'
        run: |
          # Change setuptools-scm local_scheme to "no-local-version" so the
          # local part of the version isn't included, making the version string
          # compatible with Test PyPI.
          sed --in-place 's/"root"/"local_scheme":"no-local-version","root"/g' setup.py

      - name: Build source and wheel distributions
        run: |
          # Build source and wheel packages
          python setup.py sdist
          python setup.py bdist_wheel
          echo ""
          echo "Generated files:"
          ls -lh dist/

      - name: Publish to Test PyPI
        if: success()
        # Hash corresponds to v1.4.1
        uses: pypa/gh-action-pypi-publish@54b39fb9371c0b3a6f9f14bb8a67394defc7a806
        with:
          user: __token__
          password: ${{ secrets.TEST_PYPI_PASSWORD }}
          repository_url: https://test.pypi.org/legacy/
          # Allow existing releases on test PyPI without errors.
          # NOT TO BE USED in PyPI!
          skip_existing: true

      - name: Publish to PyPI
        # Only for releases
        if: success() && github.event_name == 'release'
        # Hash corresponds to v1.4.1
        uses: pypa/gh-action-pypi-publish@54b39fb9371c0b3a6f9f14bb8a67394defc7a806
        with:
          user: __token__
          password: ${{ secrets.PYPI_PASSWORD }}
